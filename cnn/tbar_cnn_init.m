function net = tbar_cnn_init(model_str, is3d)
% net = TBAR_CNN_INIT(model_str, is3d)
%   model_str - model definition as string
%     separate layers with hyphens '-'
%     cWxF(xP)   - Convolution, W size, F feature maps, (P pad)
%     tWxF(xUxC) - convt/deconvolution, F feature maps,
%                    (U upsample, C crop)
%     mWxS       - Maxpool,     W size, S stride
%     b          - batch normalization
%     r          - Relu
%     d          - Dropout
%     eT         - sigmoid + cross-Entropy loss, T target
%     oTxRxN     - object loss, T target, R obj radius, N normalize
%     q          - squared loss
%     l          - l1 loss
%   is3d - default true

  if(~exist('is3d','var') || isempty(is3d))
    is3d = true;
  end

  net.layers = {};
  bias_c     = 0;
  input_dim  = 1;

  mm = strsplit(model_str, '-');
  for ii=1:length(mm)
    switch mm{ii}(1)
      case 'c'
        cc = strsplit(mm{ii}(2:end),'x');
        assert(length(cc)>=2 && length(cc)<=3, ...
               'FML:AssertionFailed', ...
               'misspecified conv layer');

        cc_sz = strsplit(cc{1},',');
        assert(length(cc_sz)>=1 && length(cc_sz)<=3, ...
               'FML:AssertionFailed', ...
               'misspecified conv flt sz');
        if(length(cc_sz)==1)
          cc_sz{2} = cc_sz{1};
        end
        if(length(cc_sz)==2)
          cc_sz{3} = cc_sz{2};
        end
        flt_sz = [ str2double(cc_sz{1}),...
                   str2double(cc_sz{2}),...
                   str2double(cc_sz{3}) ];

        flt_nm = str2double(cc{2});
        pd     = 0;
        if(length(cc)>2)
          cc_pd = strsplit(cc{3},',');
          assert(length(cc_pd)>=1 && length(cc_pd)<=3, ...
                 'FML:AssertionFailed', ...
                 'misspecified conv padding');
          if(length(cc_pd)==1)
            pd = str2double(cc_pd{1});
          elseif(length(cc_pd)==2)
            pd = [ str2double(cc_pd{1}) str2double(cc_pd{1}) ...
                   str2double(cc_pd{2}) str2double(cc_pd{2}) ];
          elseif(length(cc_pd)==3)
            pd = [ str2double(cc_pd{1}) str2double(cc_pd{1}) ...
                   str2double(cc_pd{2}) str2double(cc_pd{2}) ...
                   str2double(cc_pd{3}) str2double(cc_pd{3}) ];
          end
        end
        assert(~max(isnan(flt_sz)) && ~isnan(flt_nm) && ...
               ~max(isnan(pd)), ...
               'FML:AssertionFailed', ...
               'misspecified conv layer');

        if(is3d)
          net.layers{end+1} = struct(...
              'type', 'conv3', ...
              'name', sprintf('%2d_conv3', ii), ...
              'weights', {{0.01 * randn( ...
                  flt_sz(1),flt_sz(2),flt_sz(3), ...
                  input_dim, flt_nm, 'single'), ...
                           bias_c*ones(1, flt_nm, 'single')}}, ...
              'learningRate', [1 2], ...
              'stride', 1, ...
              'pad', pd);
        else
          net.layers{end+1} = struct(...
              'type', 'conv', ...
              'name', sprintf('%2d_conv', ii), ...
              'weights', {{0.01 * randn( ...
                  flt_sz(1),flt_sz(2), ...
                  input_dim, flt_nm, 'single'), ...
                           bias_c*ones(1, flt_nm, 'single')}}, ...
              'learningRate', [1 2], ...
              'stride', 1, ...
              'pad', pd);
        end

        input_dim = flt_nm;

      case 't'
        cc = strsplit(mm{ii}(2:end),'x');
        assert(length(cc)>=2 || length(cc)<=4, ...
               'FML:AssertionFailed', ...
               'misspecified convt layer');

        cc_sz = strsplit(cc{1},',');
        assert(length(cc_sz)>=1 && length(cc_sz)<=2, ...
               'FML:AssertionFailed', ...
               'misspecified conv flt sz');
        if(length(cc_sz)==1)
          cc_sz{2} = cc_sz{1};
        end
        flt_sz = [ str2double(cc_sz{1}),...
                   str2double(cc_sz{2}) ];

        flt_nm = str2double(cc{2});
        upsp   = 1;
        if(length(cc)>2)
          upsp = str2double(cc{3});
        end
        crp    = 0;
        if(length(cc)>3)
          crp = str2double(cc{4});
        end
        assert(~max(isnan(flt_sz)) && ~isnan(flt_nm) && ...
               ~isnan(upsp)   && ~isnan(crp), ...
               'FML:AssertionFailed', ...
               'misspecified convt layer');

        net.layers{end+1} = struct(...
            'type', 'convt', ...
            'name', sprintf('%2d_convt', ii), ...
            'weights', {{0.01 * randn( ...
                flt_sz(1),flt_sz(2), ...
                flt_nm, input_dim, 'single'), ...
                         bias_c*ones(1, flt_nm, 'single')}}, ...
            'learningRate', [1 2], ...
            'upsample', upsp, ...
            'crop', crp, ...
            'is3d', is3d);

        input_dim = flt_nm;


      case 'm'
        cc = strsplit(mm{ii}(2:end),'x');
        assert(length(cc)==2, 'FML:AssertionFailed', ...
               'misspecified maxpool layer');

        cc_sz = strsplit(cc{1},',');
        assert(length(cc_sz)>=1 && length(cc_sz)<=3, ...
               'FML:AssertionFailed', ...
               'misspecified pool sz');
        if(length(cc_sz)==1), cc_sz{2}=cc_sz{1}; end
        if(length(cc_sz)==2), cc_sz{3}=cc_sz{2}; end
        mpl_sz = [ str2double(cc_sz{1}),...
                   str2double(cc_sz{2}),...
                   str2double(cc_sz{3}) ];

        cc_sd = strsplit(cc{2},',');
        assert(length(cc_sd)>=1 && length(cc_sd)<=3, ...
               'FML:AssertionFailed', ...
               'misspecified pool sd');
        if(length(cc_sd)==1), cc_sd{2}=cc_sd{1}; end
        if(length(cc_sd)==2), cc_sd{3}=cc_sd{2}; end
        mpl_sd = [ str2double(cc_sd{1}),...
                   str2double(cc_sd{2}),...
                   str2double(cc_sd{3}) ];

        assert(~max(isnan(mpl_sz)) && ...
               ~max(isnan(mpl_sd)), ...
               'FML:AssertionFailed', ...
               'misspecified maxpool layer');

        if(is3d)
          net.layers{end+1} = struct(...
              'type', 'pool3', ...
              'name', sprintf('%d_pool3', ii), ...
              'pool',   [mpl_sz(1) mpl_sz(2) mpl_sz(3)], ...
              'stride', [mpl_sd(1) mpl_sd(2) mpl_sd(3)], ...
              'pad', 0);
        else
          net.layers{end+1} = struct(...
              'type', 'pool', ...
              'name', sprintf('%d_pool', ii), ...
              'pool',   [mpl_sz(1) mpl_sz(2)], ...
              'stride', [mpl_sd(1) mpl_sd(2)], ...
              'pad', 0, ...
              'method', 'max');
        end

      case 'b'
        net.layers{end+1} = struct(...
          'type', 'bnorm', ...
          'name', sprintf('%d_bnorm', ii), ...
          'weights', {{ones( input_dim, 1, 'single'), ...
                       zeros(input_dim, 1, 'single'), ...
                       zeros(input_dim, 2, 'single')}}, ...
          'learningRate', [2 1 0.05], ...
          'weightDecay', [0 0], ...
          'is3d', is3d);

      case 'r'
        net.layers{end+1} = struct(...
            'type', 'relu', ...
            'name', sprintf('%d_relu', ii));

      case 'd'
        net.layers{end+1} = struct(...
            'type', 'dropout', ...
            'name', sprintf('%d_dropout', ii), ...
            'rate', 0.5);

      case 'e'
        cc = str2double(mm{ii}(2:end));
        assert(~isnan(cc), 'FML:AssertionFailed', ...
               'misspecified sigmoid cross-entropy layer');
        net.layers{end+1} = struct(...
            'type', 'sigentloss', ...
            'target', cc);

      case 'o'
        cc = strsplit(mm{ii}(2:end),'x');
        assert(length(cc)==3, 'FML:AssertionFailed', ...
               'misspecified objloss layer');
        c_tg = str2double(cc{1});
        r_ob = str2double(cc{2});
        r_nm = str2double(cc{3});
        assert(~isnan(c_tg) && ~isnan(r_ob) && ~isnan(r_nm), ...
               'FML:AssertionFailed', ...
               'misspecified objloss layer');
        net.layers{end+1} = struct(...
            'type', 'objloss', ...
            'target', c_tg, 'robj', r_ob, 'rnorm', r_nm);

      case 'q'
        net.layers{end+1} = struct('type', 'squaredloss') ;

      case 'l'
        net.layers{end+1} = struct('type', 'l1loss') ;


      otherwise
        assert(false, 'FML:AssertionFailed', ...
               sprintf('unknown layer description: %s', ...
                       mm{ii}(1)));
    end
  end
end
