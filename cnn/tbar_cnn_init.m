function net = tbar_cnn_init(model_str)
% net = TBAR_CNN_INIT(model_str)
%   model_str - (3d) model definition as string
%     separate layers with hyphens '-'
%     cWxF - Convolution, W size, F feature maps
%     mWxS - Maxpool,     W size, S stride
%     r    - Relu
%     d    - Dropout
%     e    - sigmoid + cross-Entropy loss
    
  net.layers = {};
  bias_c     = 0;
  input_dim  = 1;
  
  mm = strsplit(model_str, '-');
  for ii=1:length(mm)
    switch mm{ii}(1)
      case 'c'
        cc = strsplit(mm{ii}(2:end),'x');
        assert(length(cc)==2, 'FML:AssertionFailed', ...
               'misspecified conv layer');
        flt_sz = str2double(cc{1});
        flt_nm = str2double(cc{2});
        assert(~isnan(flt_sz) && ~isnan(flt_nm), ...
               'FML:AssertionFailed', ...
               'misspecified conv layer');
        
        net.layers{end+1} = struct(...
            'type', 'conv3', ...
            'name', sprintf('%2d_conv3', ii), ...
            'weights', {{0.01 * randn( ...
                flt_sz,flt_sz,flt_sz, ...
                input_dim, flt_nm, 'single'), ...
                         bias_c*ones(1, flt_nm, 'single')}}, ...
            'learningRate', [1 2], ...
            'stride', 1, ...
            'pad', 0);
        input_dim = flt_nm;
      
      case 'm'
        cc = strsplit(mm{ii}(2:end),'x');
        assert(length(cc)==2, 'FML:AssertionFailed', ...
               'misspecified maxpool layer');
        mpl_sz = str2double(cc{1});
        mpl_sd = str2double(cc{2});
        assert(~isnan(mpl_sz) && ~isnan(~mpl_sd), ...
               'FML:AssertionFailed', ...
               'misspecified maxpool layer');
        
        net.layers{end+1} = struct(...
            'type', 'pool3', ...
            'name', sprintf('%d_pool3', ii), ...
            'pool', [mpl_sz mpl_sz mpl_sz], ...
            'stride', mpl_sd, ...
            'pad', 0);
      
      case 'b'
        net.layers{end+1} = struct(...
          'type', 'bnorm', ...
          'name', sprintf('%d_bnorm', ii), ...
          'weights', {{ones( input_dim, 1, 'single'), ...
                       zeros(input_dim, 1, 'single'), ...
                       zeros(input_dim, 2, 'single')}}, ...
          'learningRate', [2 1 0.05], ...
          'weightDecay', [0 0], ...
          'is3d', true);

      case 'r'
        net.layers{end+1} = struct(...
            'type', 'relu', ...
            'name', sprintf('%d_relu', ii));
        
      case 'd'
        net.layers{end+1} = struct(...
            'type', 'dropout', ...
            'name', sprintf('%d_dropout', ii), ...
            'rate', 0.5);
        
      case 'e'
        cc = str2double(mm{ii}(2:end));
        assert(~isnan(cc), 'FML:AssertionFailed', ...
               'misspecified sigmoid cross-entropy layer');
        net.layers{end+1} = struct(...
            'type', 'sigentloss', ...
            'target', cc);
        
      otherwise
        assert(false, 'FML:AssertionFailed', ...
               'unknown layer description');
    end
  end
end
